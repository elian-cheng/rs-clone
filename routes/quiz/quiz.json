[
  {
    "id": 1,
    "question": "What is TypeScript?",
    "options": [
      "a) A statically typed language",
      "b) A dynamically typed language",
      "c) A functional language",
      "d) An object-oriented language"
    ],
    "answer": "a) A statically typed language",
    "explanation": "TypeScript is a statically typed language, meaning that type information is known at compile time, allowing for better tooling, stronger type safety and making it easier to catch type errors before runtime.",
    "difficulty": "easy"
  },
  {
    "id": 2,
    "question": "How do you declare a variable in TypeScript?",
    "options": ["a) var x;", "b) let x;", "c) const x;", "d) define x;"],
    "answer": "b) let x;",
    "explanation": "TypeScript follows the same syntax as JavaScript in declaring variables. The 'var' keyword is not recommended in TypeScript and should be replaced by 'let' or 'const', depending on whether the value of the variable can change or not.",
    "difficulty": "easy"
  },
  {
    "id": 3,
    "question": "What is the difference between 'let' and 'const'?",
    "options": [
      "a) 'let' can change its value, 'const' cannot",
      "b) 'const' can change its value, 'let' cannot",
      "c) Both 'let' and 'const' can change their value",
      "d) Neither 'let' nor 'const' can change their value"
    ],
    "answer": "a) 'let' can change its value, 'const' cannot",
    "explanation": "'Let' allows you to reassign a new value to the variable, while 'const' creates a constant variable, whose value cannot be changed once it has been assigned.",
    "difficulty": "easy"
  },
  {
    "id": 4,
    "question": "How do you define a type for a variable in TypeScript?",
    "options": [
      "a) var x: type;",
      "b) let x: type;",
      "c) const x: type;",
      "d) both b) and c) are correct"
    ],
    "answer": "d) both b) and c) are correct",
    "explanation": "In TypeScript, you can specify the type of a variable by using the ':' operator. The variable can be declared with 'let' or 'const'.",
    "difficulty": "easy"
  },
  {
    "id": 5,
    "question": "What is an interface in TypeScript?",
    "options": [
      "a) A blueprint for objects",
      "b) A blueprint for classes",
      "c) A blueprint for functions",
      "d) A blueprint for variables"
    ],
    "answer": "a) A blueprint for objects",
    "explanation": "An interface in TypeScript defines a blueprint for objects. It specifies the structure of an object, including the properties it should have and their respective types, making it easier to write and maintain code that works with objects of a certain structure.",
    "difficulty": "easy"
  }
]

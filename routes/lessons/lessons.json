[
  {
    "id": "1",
    "title": "What is TypeScript?",
    "description": ["", ""],
    "examples": [
      "console.log('Hello, World!')",
      "Benefits of type cheking: \nfunction sum(a: number, b: number) {\nreturn a + b;\n} \n sum(10n, 5) // Argument of type 'bigint' is not assignable to parameter of type 'number'."
    ],
    "theme": "Overview"
  },
  {
    "id": "2",
    "title": "Installation",
    "description": ["", "", ""],
    "examples": [
      "Let: \nx = 10; // x is now 10",
      "Const: \ny = 10; // error: y is read-only",
      "Type declaration: \nlet x: number = 5"
    ],
    "theme": "Overview"
  },
  {
    "id": "3",
    "title": "First Program",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Overview"
  },
  {
    "id": "4",
    "title": "Type Annotations",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "5",
    "title": "Variable",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "6",
    "title": "Number",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "7",
    "title": "String",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "8",
    "title": "Boolean",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "9",
    "title": "Arrays",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "10",
    "title": "Tuples",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "11",
    "title": "Enum",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "12",
    "title": "Union",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "13",
    "title": "Any",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "14",
    "title": "Void",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "15",
    "title": "Never",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "16",
    "title": "Type Inference",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "17",
    "title": "Type Assertion",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Data Types"
  },
  {
    "id": "18",
    "title": "Functions",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Functions"
  },
  {
    "id": "19",
    "title": "Arrow Functions",
    "description": ["", "", ""],
    "examples": [
      "Number: \nx = 10; // x has value of type 'number'",
      "let order = 'first'; \norder = 1; // error: Type '1' is not assignable to type 'string'",
      "console.log(firstName.lenght); // error: Property 'lenght' does not exist on type 'string'. Did you mean 'length'?"
    ],
    "theme": "Functions"
  },
  {
    "id": "100",
    "title": "Any",
    "description": [
      "There are some places where TypeScript will not try to infer what type something is—generally when a variable is declared without being assigned an initial value. In situations where it isn’t able to infer a type, TypeScript will consider a variable to be of type any.",
      "Variables of type any can be assigned to any value and TypeScript won’t give an error if they’re reassigned to a different type later on."
    ],
    "examples": ["let myLet; \nmyLet = 1; \nmyLet = false; // TypeScript doesn’t produce an error"],
    "theme": "Object Oriented TypeScript"
  }
]

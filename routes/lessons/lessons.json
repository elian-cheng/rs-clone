[
  {
    "id": "1",
    "title": "What is TypeScript?",
    "description": [
      "Programming languages divide into two categories: statically-typed and dynamically-typed.",
      "In statically-typed languages (eg C++, C#, Java, etc), the type of variables is set at compile-time and cannot change later.",
      "In dynamically-typed languages (eg Python, JavaScript, Ruby), the type of variables is determined at run-time and can change later.",
      "<b>TypeScript</b> is a free and open source high-level programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language.",
      "Most IDEs and code editors supporting TypeScript provide incredible IntelliSense and auto-completion. So we get active hints as we code. A great productivity booster!"
    ],
    "examples": [
      "example"
    ],
    "question": "What is TypeScript?",
    "options": [
      "a) A statically typed language.",
      "b) A dynamically typed language.",
      "c) A functional language.",
      "d) An object-oriented language."
    ],
    "answer": "a) A statically typed language.",
    "theme": "Overview"
  },
  {
    "id": "2",
    "title": "What is TypeScript for?",
    "description": [
      "<i>TypeScript</i> significantly reduces the time it takes to fix bugs and find bugs that are sometimes hard to find in the dynamic <i>JavaScript</i> environment.",
      "In case TypeScript is the first typed language for a developer, you should know that learning it will greatly accelerate the process of professional growth, since the typed world opens up aspects of programming that are not obvious in dynamic languages.",
      "In addition, TypeScript allows you to write more understandable and readable code that describes the subject area as much as possible, due to which the application architecture becomes more pronounced, and the development implicitly increases the professional level of the programmer.",
      "All this, in its totality, reduces the development time of the program, reducing its cost and providing developers with the opportunity to quickly start implementing a new and even more interesting project."
    ],
    "examples": [
      "example"
    ],
    "question": "What are the benefits of TypeScript?",
    "options": [
      "a) Finding some kinds of errors before running the code.",
      "b) Easier code refactoring.",
      "c) Full support for editor features.",
      "d) All of the above."
    ],
    "answer": "d) All of the above.",
    "theme": "Overview"
  },
  {
    "id": "3",
    "title": "Installation",
    "description": [
      "You can use TypeScript with two tools: <code>tsc</code> and <code>ts-node</code>. The former compiles the code to JavaScript, while the latter executes the code directly.",
      "To install TypeScript, you need to install Node.js and npm.",
      "<code>tsc</code> installation:",
      "<code>npm install -g typescript</code>",
      "Installing <code>ts-node</code>:",
      "<code>npm install -g ts-node</code>"
    ],
    "examples": [
      "example"
    ],
        "question": "What is the typescript file compiled into?",
    "options": [
      "a) JavaScript.",
      "b) VBScript.",
      "c) TypeScript",
      "d) None of the above."
    ],
    "answer": "a) JavaScript.",
    "theme": "Overview"
  },
  {
    "id": "4",
    "title": "Variables",
    "description": [
      "Variables and constants in TypeScript are defined in exactly the same way as in JavaScript:",
      "<code>let age = 10;</code>",
      "<code>let company = 'TS Academy';</code>",
      "<code>let user = {</code>",
      "<code>&nbsp;&nbsp;firstName: 'Miro',</code>",
      "<code>};</code>",
      "<code>let fruits = ['apple', 'banana'];</code>",
      "Despite being identical on the outside, TypeScript does some extra work in the background. It automatically binds the variable (or constant) to the data type of the initial value. In programming, this process is called type inference.",
      "Variable type cannot be changed:",
      "<code>let age = 10;</code>",
      "<code>// Everything is fine, the type is the same (Number)</code>",
      "<code>age = 11.1;</code>",
      "<code>&nbsp; </code>",
      "<code>// Type 'string' is not assignable to type 'number'.</code>",
      "<code>age = 'some string'; // Error!</code>",
      "If we try to pass this variable to a method that expects a different type, this will also result in an error.",
      "Static typing imposes a restriction on arrays, only one type of data can be stored inside.",
      "With objects the situation is even stricter. In TypeScript, you can not only change the type of properties within an object, but also add new properties dynamically.",
      "<h2>Explicit type specification</h2>",
      "Technically, TypeScript allows you to explicitly specify the type of variables. But in practice, this rarely needs to be done manually, as type inference works automatically.",
      "<code>let name: string = 'Alice';</code>",
      "<code>const count: number = 100;</code>",
      "<code>let canPlay: boolean = true;</code>",
      "<h2>Null</h2>",
      "By default in TypeScript, variables can only contain the specified type with no exceptions, for example we can't assign null:",
      "<code>let age = 30;</code>",
      "<code>age = null; // Error!</code>",
      "This behavior protects us from a large number of errors related to the lack of checks for null."
    ],
    "examples": [
      "example"
    ],
        "question": "Which of the following statement declares a variable in TypeScript?",
    "options": [
      "a) var myVar = 123;",
      "b) var myVar:number = 123;",
      "c) let myVar:number = 123;",
      "d) All of the above"
    ],
    "answer": "d) All of the above",
    "theme": "TypeScript Basics"
  },
  {
    "id": "5",
    "title": "Named Functions",
    "description": [
      "In the definition of variables, we usually do not specify the type of this variable, it is automatically inferred. With functions, this trick will not work, they require the mandatory specification of the types of all input parameters:",
      "<code>function getGreetingPhrase(name: string) {</code>",
      "<code>&nbsp;&nbsp;return `Hello, ${name.toUpperCase()}!`;</code>",
      "<code>}</code>",
      "With this indication, the parameter will be required. Attempting to call a function without a parameter will result in a compilation error:",
      "<code>// Expected 1 arguments, but got 0.</code>",
      "<code>getGreetingPhrase();</code>",
      "<h2>Optional parameter</h2>",
      "To make a parameter optional, add a <i>?</i> after the variable name:",
      "<code>function getGreetingPhrase(name?: string) {</code>",
      "<code>&nbsp;&nbsp;return `Hello, ${name ? name.toUpperCase() : 'Guest'}!`;</code>",
      "<code>}</code>",
      "<code>getGreetingPhrase('Mike'); // Hello, Mike!</code>",
      "<code>getGreetingPhrase(); // Hello, Guest!</code>",
      "In this case, the type of the variable <code>name</code> becomes Union Type: <code>string | undefined</code>, which reads \"string or undefined\".",
      "<h2>Default value</h2>",
      "The situation is simpler with the default value. There is no need to specify anything else here, the value is set as in JavaScript. The variable itself is automatically made optional, and the type is inferred from the passed value",
      "<code>function getGreetingPhrase(name = 'Guest') {</code>",
      "<code>&nbsp;&nbsp;return `Hello, ${name.toUpperCase()}!`;</code>",
      "<code>}</code>",
      "<code>getGreetingPhrase() // Hello, GUEST!</code>",
      "<h2>return type</h2>",
      "In many cases, TypeScript infers the return type itself, but you can specify it explicitly:",
      "<code>function getGreetingPhrase(name: string): string {</code>",
      "<code>&nbsp;&nbsp;return `Hello, ${name.toUpperCase()}!`;</code>",
      "<code>}</code>",
      "Although the return type can be inferred, we recommend that you always specify it. This simplifies documentation, protects the code from accidental changes."
    ],
    "examples": [
      "example"
    ],
        "question": "We can't make an optional function parameter in TypeScript.",
    "options": [
      "a) False",
      "b) True"
    ],
    "answer": "a) False",
    "theme": "TypeScript Basics"
  },
  {
    "id": "6",
    "title": "Anonymous functions",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "TypeScript Basics"
  },
  {
    "id": "7",
    "title": "Arrays",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "TypeScript Basics"
  },
  {
    "id": "8",
    "title": "Object Types",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "TypeScript Basics"
  },
  {
    "id": "9",
    "title": "Enums",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "TypeScript Basics"
  },
  {
    "id": "10",
    "title": "Type Aliases",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "TypeScript Basics"
  },
  {
    "id": "11",
    "title": "Any type",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "TypeScript Basics"
  },
  {
    "id": "12",
    "title": "System of modules",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "TypeScript Basics"
  },
  {
    "id": "13",
    "title": "Functions as parameters",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "Function typing"
  },
  {
    "id": "14",
    "title": "Type annotations",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "Array typing"
  },
  {
    "id": "15",
    "title": "Types as sets",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "More about types"
  },
  {
    "id": "15",
    "title": "Classes",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "Classes"
  },
  {
    "id": "16",
    "title": "About interfaces",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "Interfaces"
  },
  {
    "id": "16",
    "title": "Introduction to Generics",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "Generics"
  },
  {
    "id": "17",
    "title": "Dynamic Keys (Index Signature)",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "Object typing"
  },
  {
    "id": "18",
    "title": "Keyof type operator",
    "description": [
      "<h2>Header</h2>",
      "<code>//code example</code>",
      "Description"
    ],
    "examples": [
      "examples"
    ],
        "question": "Question: A is right",
    "options": [
      "a) A option",
      "b) B option",
      "c) c option",
      "d) d option"
    ],
    "answer": "a) A option",
    "theme": "Working with types"
  }
]
